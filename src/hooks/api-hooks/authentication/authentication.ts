/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * API V1
 * <h2>Sample data for test api(s)</h2><br/><hr/><strong>Username : user</strong><br/><strong>Password : pass</strong><br/><strong>Mobile : 0919********</strong><br/><hr/>
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from "@tanstack/react-query"

import { customInstance } from "../../../helpers/api-helper/axios-instance"
import type {
	CommonBaseApiResult,
	CommonBaseApiResult1FluentResultsResult1SystemBooleanSystemPrivateCoreLibVersion8000CultureNeutralPublicKeyToken7cec85d7bea7798eFluentResultsVersion3500CultureNeutralPublicKeyTokenNull,
	GetApiV1CustomerAuthenticationUserGetParams,
	InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest,
	InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
} from "../../../model"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const postApiV1CustomerAuthenticationOTPSendCode = (
	insuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<CommonBaseApiResult>(
		{
			url: `/api/v1/Customer/Authentication/OTP/SendCode`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: insuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest,
			signal
		},
		options
	)
}

export const getPostApiV1CustomerAuthenticationOTPSendCodeMutationOptions = <
	TError = CommonBaseApiResult | void,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>,
		TError,
		{
			data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
		},
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>,
	TError,
	{
		data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
	},
	TContext
> => {
	const mutationKey = ["postApiV1CustomerAuthenticationOTPSendCode"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>,
		{
			data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
		}
	> = (props) => {
		const { data } = props ?? {}

		return postApiV1CustomerAuthenticationOTPSendCode(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type PostApiV1CustomerAuthenticationOTPSendCodeMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>
	>
export type PostApiV1CustomerAuthenticationOTPSendCodeMutationBody =
	InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
export type PostApiV1CustomerAuthenticationOTPSendCodeMutationError =
	CommonBaseApiResult | void

export const usePostApiV1CustomerAuthenticationOTPSendCode = <
	TError = CommonBaseApiResult | void,
	TContext = unknown
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>,
			TError,
			{
				data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
			},
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPSendCode>>,
	TError,
	{
		data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestSendCodeRequest
	},
	TContext
> => {
	const mutationOptions =
		getPostApiV1CustomerAuthenticationOTPSendCodeMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const postApiV1CustomerAuthenticationOTPVerifyCode = (
	insuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<CommonBaseApiResult1FluentResultsResult1SystemBooleanSystemPrivateCoreLibVersion8000CultureNeutralPublicKeyToken7cec85d7bea7798eFluentResultsVersion3500CultureNeutralPublicKeyTokenNull>(
		{
			url: `/api/v1/Customer/Authentication/OTP/VerifyCode`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: insuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest,
			signal
		},
		options
	)
}

export const getPostApiV1CustomerAuthenticationOTPVerifyCodeMutationOptions = <
	TError = CommonBaseApiResult | void,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>,
		TError,
		{
			data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
		},
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>,
	TError,
	{
		data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
	},
	TContext
> => {
	const mutationKey = ["postApiV1CustomerAuthenticationOTPVerifyCode"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>,
		{
			data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
		}
	> = (props) => {
		const { data } = props ?? {}

		return postApiV1CustomerAuthenticationOTPVerifyCode(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type PostApiV1CustomerAuthenticationOTPVerifyCodeMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>
	>
export type PostApiV1CustomerAuthenticationOTPVerifyCodeMutationBody =
	InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
export type PostApiV1CustomerAuthenticationOTPVerifyCodeMutationError =
	CommonBaseApiResult | void

export const usePostApiV1CustomerAuthenticationOTPVerifyCode = <
	TError = CommonBaseApiResult | void,
	TContext = unknown
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>,
			TError,
			{
				data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
			},
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof postApiV1CustomerAuthenticationOTPVerifyCode>>,
	TError,
	{
		data: InsuranceBusinessPortalGeneralAuthenticationCommonRequestVerifyCodeRequest
	},
	TContext
> => {
	const mutationOptions =
		getPostApiV1CustomerAuthenticationOTPVerifyCodeMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const getApiV1CustomerAuthenticationUserGet = (
	params?: GetApiV1CustomerAuthenticationUserGetParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<CommonBaseApiResult>(
		{
			url: `/api/v1/Customer/Authentication/User/Get`,
			method: "GET",
			params,
			signal
		},
		options
	)
}

export const getGetApiV1CustomerAuthenticationUserGetQueryKey = (
	params?: GetApiV1CustomerAuthenticationUserGetParams
) => {
	return [
		`/api/v1/Customer/Authentication/User/Get`,
		...(params ? [params] : [])
	] as const
}

export const getGetApiV1CustomerAuthenticationUserGetQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerAuthenticationUserGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	}
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey =
		queryOptions?.queryKey ??
		getGetApiV1CustomerAuthenticationUserGetQueryKey(params)

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>
	> = ({ signal }) =>
		getApiV1CustomerAuthenticationUserGet(params, requestOptions, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CustomerAuthenticationUserGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>
>
export type GetApiV1CustomerAuthenticationUserGetQueryError =
	CommonBaseApiResult | void

export function useGetApiV1CustomerAuthenticationUserGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
	TError = CommonBaseApiResult | void
>(
	params: undefined | GetApiV1CustomerAuthenticationUserGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerAuthenticationUserGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerAuthenticationUserGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerAuthenticationUserGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerAuthenticationUserGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetApiV1CustomerAuthenticationUserGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerAuthenticationUserGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerAuthenticationUserGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetApiV1CustomerAuthenticationUserGetQueryOptions(
		params,
		options
	)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}
