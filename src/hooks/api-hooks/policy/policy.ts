/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * API V1
 * <h2>Sample data for test api(s)</h2><br/><hr/><strong>Username : user</strong><br/><strong>Password : pass</strong><br/><strong>Mobile : 0919********</strong><br/><hr/>
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query"
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult
} from "@tanstack/react-query"

import { customInstance } from "../../../helpers/api-helper/axios-instance"
import type {
	CommonBaseApiResult,
	GetApiV1CustomerPolicyGetParams,
	InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest
} from "../../../model"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const getApiV1CustomerPolicyGet = (
	params?: GetApiV1CustomerPolicyGetParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<CommonBaseApiResult>(
		{ url: `/api/v1/Customer/Policy/Get`, method: "GET", params, signal },
		options
	)
}

export const getGetApiV1CustomerPolicyGetQueryKey = (
	params?: GetApiV1CustomerPolicyGetParams
) => {
	return [`/api/v1/Customer/Policy/Get`, ...(params ? [params] : [])] as const
}

export const getGetApiV1CustomerPolicyGetQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerPolicyGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	}
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey =
		queryOptions?.queryKey ?? getGetApiV1CustomerPolicyGetQueryKey(params)

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>
	> = ({ signal }) => getApiV1CustomerPolicyGet(params, requestOptions, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CustomerPolicyGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>
>
export type GetApiV1CustomerPolicyGetQueryError = CommonBaseApiResult | void

export function useGetApiV1CustomerPolicyGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
	TError = CommonBaseApiResult | void
>(
	params: undefined | GetApiV1CustomerPolicyGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerPolicyGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerPolicyGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerPolicyGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerPolicyGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetApiV1CustomerPolicyGet<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
	TError = CommonBaseApiResult | void
>(
	params?: GetApiV1CustomerPolicyGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGet>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetApiV1CustomerPolicyGetQueryOptions(params, options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}

export const getApiV1CustomerPolicyGetById = (
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<CommonBaseApiResult>(
		{
			url: `/api/v1/Customer/Policy/GetById`,
			method: "GET",
			headers: { "Content-Type": "application/json" },
			signal
		},
		options
	)
}

export const getGetApiV1CustomerPolicyGetByIdQueryKey = (
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest?: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest
) => {
	return [
		`/api/v1/Customer/Policy/GetById`,
		insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest
	] as const
}

export const getGetApiV1CustomerPolicyGetByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
	TError = CommonBaseApiResult | void
>(
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	}
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey =
		queryOptions?.queryKey ??
		getGetApiV1CustomerPolicyGetByIdQueryKey(
			insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest
		)

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>
	> = ({ signal }) =>
		getApiV1CustomerPolicyGetById(
			insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
			requestOptions,
			signal
		)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CustomerPolicyGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>
>
export type GetApiV1CustomerPolicyGetByIdQueryError = CommonBaseApiResult | void

export function useGetApiV1CustomerPolicyGetById<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
	TError = CommonBaseApiResult | void
>(
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerPolicyGetById<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
	TError = CommonBaseApiResult | void
>(
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
					TError,
					Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiV1CustomerPolicyGetById<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
	TError = CommonBaseApiResult | void
>(
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetApiV1CustomerPolicyGetById<
	TData = Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
	TError = CommonBaseApiResult | void
>(
	insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest: InsuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1CustomerPolicyGetById>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetApiV1CustomerPolicyGetByIdQueryOptions(
		insuranceBusinessPortalCustomerPolicyCommonRequestCustomerDetailFilterRequest,
		options
	)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}
